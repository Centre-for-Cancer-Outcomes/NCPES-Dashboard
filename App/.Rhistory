xlab("Question Number") + ylab("Score") + ggtitle("Orginization CPES Results") +
theme(legend.position = "bottom")+ guides(fill=guide_legend(nrow=3,byrow=TRUE))+ coord_flip()
}
if("adjusted" == "adjusted"){
ggplot(overviewbarplot,aes(Question.Number,scored.percentage)) + geom_bar(stat = "identity",aes(fill = Performance)) +
geom_errorbar(aes(ymin = Lower.95..confidence.interval,ymax =Upper.95..confidence.interval), width = 0.2, position=position_dodge(0.9)) +
xlab("Question Number") + ylab("Score") + ggtitle("Orginization CPES Results") +
theme(legend.position = "bottom")+ guides(fill=guide_legend(nrow=3,byrow=TRUE))+ coord_flip()
}else {
ggplot(overviewbarplot,aes(Question.Number,scored.percentage)) + geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = Lower.95..confidence.interval,ymax =Upper.95..confidence.interval), width = 0.2, position=position_dodge(0.9)) +
xlab("Question Number") + ylab("Score") + ggtitle("Orginization CPES Results") +
theme(legend.position = "bottom")+ guides(fill=guide_legend(nrow=3,byrow=TRUE))+ coord_flip()
}
theme_set(theme_classic())
theme_set(theme_classic())
if("adjusted" == "adjusted"){
ggplot(overviewbarplot,aes(Question.Number,scored.percentage)) + geom_bar(stat = "identity",aes(fill = Performance)) +
geom_errorbar(aes(ymin = Lower.95..confidence.interval,ymax =Upper.95..confidence.interval), width = 0.2, position=position_dodge(0.9)) +
xlab("Question Number") + ylab("Score") + ggtitle("Orginization CPES Results") +
theme(legend.position = "bottom")+ guides(fill=guide_legend(nrow=3,byrow=TRUE))+ coord_flip()
}else {
ggplot(overviewbarplot,aes(Question.Number,scored.percentage)) + geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = Lower.95..confidence.interval,ymax =Upper.95..confidence.interval), width = 0.2, position=position_dodge(0.9)) +
xlab("Question Number") + ylab("Score") + ggtitle("Orginization CPES Results") +
theme(legend.position = "bottom")+ guides(fill=guide_legend(nrow=3,byrow=TRUE))+ coord_flip()
}
if("unadjusted" == "adjusted"){
ggplot(overviewbarplot,aes(Question.Number,scored.percentage)) + geom_bar(stat = "identity",aes(fill = Performance)) +
geom_errorbar(aes(ymin = Lower.95..confidence.interval,ymax =Upper.95..confidence.interval), width = 0.2, position=position_dodge(0.9)) +
xlab("Question Number") + ylab("Score") + ggtitle("Orginization CPES Results") +
theme(legend.position = "bottom")+ guides(fill=guide_legend(nrow=3,byrow=TRUE))+ coord_flip()
}else {
ggplot(overviewbarplot,aes(Question.Number,scored.percentage)) + geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = Lower.95..confidence.interval,ymax =Upper.95..confidence.interval), width = 0.2, position=position_dodge(0.9)) +
xlab("Question Number") + ylab("Score") + ggtitle("Orginization CPES Results") +
theme(legend.position = "bottom")+ guides(fill=guide_legend(nrow=3,byrow=TRUE))+ coord_flip()
}
if("unadjusted" == "adjusted"){
ggplot(overviewbarplot,aes(Question.Number,scored.percentage)) + geom_bar(stat = "identity",aes(fill = Performance)) +
geom_errorbar(aes(ymin = Lower.95..confidence.interval,ymax =Upper.95..confidence.interval), width = 0.2, position=position_dodge(0.9)) +
xlab("Question Number") + ylab("Score") + ggtitle("Orginization CPES Results") +
theme(legend.position = "bottom")+ guides(fill=guide_legend(nrow=3,byrow=TRUE))+ coord_flip()
}else {
ggplot(overviewbarplot,aes(Question.Number,scored.percentage)) + geom_bar(stat = "identity",aes(fill = "cornflowerblue")) +
geom_errorbar(aes(ymin = Lower.95..confidence.interval,ymax =Upper.95..confidence.interval), width = 0.2, position=position_dodge(0.9)) +
xlab("Question Number") + ylab("Score") + ggtitle("Orginization CPES Results") +
theme(legend.position = "bottom")+ guides(fill=guide_legend(nrow=3,byrow=TRUE))+ coord_flip()
}
if("unadjusted" == "adjusted"){
ggplot(overviewbarplot,aes(Question.Number,scored.percentage)) + geom_bar(stat = "identity",aes(fill = Performance)) +
geom_errorbar(aes(ymin = Lower.95..confidence.interval,ymax =Upper.95..confidence.interval), width = 0.2, position=position_dodge(0.9)) +
xlab("Question Number") + ylab("Score") + ggtitle("Orginization CPES Results") +
theme(legend.position = "bottom")+ guides(fill=guide_legend(nrow=3,byrow=TRUE))+ coord_flip()
}else {
ggplot(overviewbarplot,aes(Question.Number,scored.percentage)) + geom_bar(stat = "identity",aes(color = "cornflowerblue")) +
geom_errorbar(aes(ymin = Lower.95..confidence.interval,ymax =Upper.95..confidence.interval), width = 0.2, position=position_dodge(0.9)) +
xlab("Question Number") + ylab("Score") + ggtitle("Orginization CPES Results") +
theme(legend.position = "bottom")+ guides(fill=guide_legend(nrow=3,byrow=TRUE))+ coord_flip()
}
if("unadjusted" == "adjusted"){
ggplot(overviewbarplot,aes(Question.Number,scored.percentage)) + geom_bar(stat = "identity",aes(fill = Performance)) +
geom_errorbar(aes(ymin = Lower.95..confidence.interval,ymax =Upper.95..confidence.interval), width = 0.2, position=position_dodge(0.9)) +
xlab("Question Number") + ylab("Score") + ggtitle("Orginization CPES Results") +
theme(legend.position = "bottom")+ guides(fill=guide_legend(nrow=3,byrow=TRUE))+ coord_flip()
}else {
ggplot(overviewbarplot,aes(Question.Number,scored.percentage)) + geom_bar(stat = "identity", fill = "cornflowerblue") +
geom_errorbar(aes(ymin = Lower.95..confidence.interval,ymax =Upper.95..confidence.interval), width = 0.2, position=position_dodge(0.9)) +
xlab("Question Number") + ylab("Score") + ggtitle("Orginization CPES Results") +
theme(legend.position = "bottom")+ guides(fill=guide_legend(nrow=3,byrow=TRUE))+ coord_flip()
}
runApp('R shiny apps/NCPES')
runApp('R shiny apps/NCPES')
runApp('R shiny apps/NCPES')
runApp('R shiny apps/NCPES')
## load packages
library(shiny)
runApp('R shiny apps/NCPES')
ncpes$abrvperformance <- ifelse(ncpes$Performance.Rating == 1, "Above",
ifelse(ncpes$Performance.Rating == 2,"As Expected","Below"))
runApp('R shiny apps/NCPES')
if("unadjusted" == "adjusted"){
ggplot(overviewbarplot,aes(Question.Number,scored.percentage)) + geom_bar(stat = "identity",aes(fill = Performance)) +
geom_errorbar(aes(ymin = Lower.95..confidence.interval,ymax =Upper.95..confidence.interval), width = 0.2, position=position_dodge(0.9)) +
xlab("Question Number") + ylab("Score") + ggtitle("Orginization CPES Results") +
theme(legend.position = "bottom")+ guides(fill=guide_legend(nrow=3,byrow=TRUE))+ scale_y_continuous(expand = c(0,0)) +coord_flip()
}else {
ggplot(overviewbarplot,aes(Question.Number,scored.percentage)) + geom_bar(stat = "identity", fill = "cornflowerblue") +
geom_errorbar(aes(ymin = Lower.95..confidence.interval,ymax =Upper.95..confidence.interval), width = 0.2, position=position_dodge(0.9)) +
xlab("Question Number") + ylab("Score") + ggtitle("Orginization CPES Results") +
theme(legend.position = "bottom")+ scale_y_continuous(expand = c(0,0)) +coord_flip()
}
runApp('R shiny apps/NCPES')
runApp('R shiny apps/NCPES')
overviewtable <- ncpes %>%
filter(ncpes$Geog == "Trust" & ncpes$Trust.Name == trust & ncpes$IMD == "All" & ncpes$Year == 2018 &
ncpes$Gender == "Both", ncpes$adjusted.unadjusted.yearonyear == "adjusted" & ncpes$Cancer.Type == "All Cancers" &
ncpes$qnum != 59) %>%
select(qnum,Question.Text,Number.of.responses,scored.percentage) %>%
datatable(rownames = FALSE)
overviewtable
library(DT)
overviewtable <- ncpes %>%
filter(ncpes$Geog == "Trust" & ncpes$Trust.Name == trust & ncpes$IMD == "All" & ncpes$Year == 2018 &
ncpes$Gender == "Both", ncpes$adjusted.unadjusted.yearonyear == "adjusted" & ncpes$Cancer.Type == "All Cancers" &
ncpes$qnum != 59) %>%
select(qnum,Question.Text,Number.of.responses,scored.percentage) %>%
datatable(rownames = FALSE)
overviewtable
overviewtable <- ncpes %>%
filter(ncpes$Geog == "Trust" & ncpes$Trust.Name == trust & ncpes$IMD == "All" & ncpes$Year == 2018 &
ncpes$Gender == "Both", ncpes$adjusted.unadjusted.yearonyear == "adjusted" & ncpes$Cancer.Type == "All Cancers" &
ncpes$qnum != 59) %>%
select(Question.Number,Question.Text,Number.of.responses,scored.percentage) %>%
datatable(rownames = FALSE, colnames = c("Question Number","Question","Number of Responses","Score"))
overviewtable
overviewtable <- ncpes %>%
filter(ncpes$Geog == "Trust" & ncpes$Trust.Name == trust & ncpes$IMD == "All" & ncpes$Year == 2018 &
ncpes$Gender == "Both", ncpes$adjusted.unadjusted.yearonyear == "adjusted" & ncpes$Cancer.Type == "All Cancers" ) %>%
select(Question.Number,Question.Text,Number.of.responses,scored.percentage) %>%
datatable(rownames = FALSE, colnames = c("Question Number","Question","Number of Responses","Score"))
overviewtable
overviewtable <- ncpes %>%
filter(ncpes$Geog == "Trust" & ncpes$Trust.Name == trust & ncpes$IMD == "All" & ncpes$Year == 2018 &
ncpes$Gender == "Both", ncpes$adjusted.unadjusted.yearonyear == "adjusted" & ncpes$Cancer.Type == "All Cancers" ) %>%
select(Question.Number,Question.Text,Number.of.responses,scored.percentage) %>%
datatable(rownames = FALSE, colnames = c("Question Number","Question","Number of Responses","Score"),
class = c("hover","stripe","row-border"))
overviewtable
overviewtable <- ncpes %>%
filter(ncpes$Geog == "Trust" & ncpes$Trust.Name == trust & ncpes$IMD == "All" & ncpes$Year == 2018 &
ncpes$Gender == "Both", ncpes$adjusted.unadjusted.yearonyear == "adjusted" & ncpes$Cancer.Type == "All Cancers" ) %>%
select(Question.Number,Question.Text,Number.of.responses,scored.percentage) %>%
datatable(rownames = FALSE, colnames = c("Question Number","Question","Number of Responses","Score"),
class = c("row-border"))
overviewtable
overviewtable <- ncpes %>%
filter(ncpes$Geog == "Trust" & ncpes$Trust.Name == trust & ncpes$IMD == "All" & ncpes$Year == 2018 &
ncpes$Gender == "Both", ncpes$adjusted.unadjusted.yearonyear == "adjusted" & ncpes$Cancer.Type == "All Cancers" ) %>%
select(Question.Number,Question.Text,Number.of.responses,scored.percentage) %>%
datatable(rownames = FALSE, colnames = c("Question Number","Question","Number of Responses","Score"),
class = c("hover","row-border"))
overviewtable
overviewtable <- ncpes %>%
filter(ncpes$Geog == "Trust" & ncpes$Trust.Name == trust & ncpes$IMD == "All" & ncpes$Year == 2018 &
ncpes$Gender == "Both", ncpes$adjusted.unadjusted.yearonyear == "adjusted" & ncpes$Cancer.Type == "All Cancers" ) %>%
select(Question.Number,Question.Text,Number.of.responses,scored.percentage) %>%
datatable(rownames = FALSE, colnames = c("Question Number","Question","Number of Responses","Score"),
class = c("stripe","row-border"))
overviewtable
overviewtable <- ncpes %>%
filter(ncpes$Geog == "Trust" & ncpes$Trust.Name == trust & ncpes$IMD == "All" & ncpes$Year == 2018 &
ncpes$Gender == "Both", ncpes$adjusted.unadjusted.yearonyear == "adjusted" & ncpes$Cancer.Type == "All Cancers" ) %>%
select(Question.Number,Question.Text,Number.of.responses,scored.percentage) %>%
datatable(rownames = FALSE, colnames = c("Question Number","Question","Number of Responses","Score"),
class = c("row-border"))
overviewtable
overviewtable <- ncpes %>%
filter(ncpes$Geog == "Trust" & ncpes$Trust.Name == trust & ncpes$IMD == "All" & ncpes$Year == 2018 &
ncpes$Gender == "Both", ncpes$adjusted.unadjusted.yearonyear == "adjusted" & ncpes$Cancer.Type == "All Cancers" ) %>%
select(Question.Number,Question.Text,Number.of.responses,scored.percentage) %>%
datatable(rownames = FALSE, colnames = c("Question Number","Question","Number of Responses","Score"),
class = c('cell-border stripe'))
overviewtable
overviewtable <- ncpes %>%
filter(ncpes$Geog == "Trust" & ncpes$Trust.Name == trust & ncpes$IMD == "All" & ncpes$Year == 2018 &
ncpes$Gender == "Both", ncpes$adjusted.unadjusted.yearonyear == "adjusted" & ncpes$Cancer.Type == "All Cancers" ) %>%
select(Question.Number,Question.Text,Number.of.responses,scored.percentage) %>%
datatable(rownames = FALSE, colnames = c("Question Number","Question","Number of Responses","Score"),
class = c('cell-border stripe'),extensions = c('Buttons', 'Scroller'),
options = list(
pageLength = 52,
dom = 'Bfrtip',
buttons = c('copy','csv', 'excel'),
deferRender = TRUE,
scrollY = 400,
scroller = TRUE
))
overviewtable
runApp('R shiny apps/NCPES')
runApp('R shiny apps/NCPES')
runApp('R shiny apps/NCPES')
runApp('R shiny apps/NCPES')
ggpoverviewtable <- ncpes %>%
filter(ncpes$Geog == "Trust" & ncpes$Trust.Name == trust & ncpes$IMD == "All" & ncpes$Year == 2018 &
ncpes$Gender == "Both", ncpes$adjusted.unadjusted.yearonyear == "adjusted" & ncpes$Cancer.Type == "All Cancers" ) %>%
select(Question.Number,Question.Text,Number.of.responses,scored.percentage) %>%
datatable(rownames = FALSE, colnames = c("Question Number","Question","Number of Responses","Score"),
class = c('cell-border stripe'),extensions = c('Buttons', 'Scroller'),
options = list(
pageLength = 52,
dom = 'Bfrtip',
buttons = c('copy','csv', 'excel'),
deferRender = TRUE,
scrollY = 400,
scroller = TRUE
))
ggpoverviewtable
ggpoverviewtable <- ncpes %>%
filter(ncpes$Geog == "Trust" & ncpes$Trust.Name == trust & ncpes$IMD == "All" & ncpes$Year == 2018 &
ncpes$Gender == "Both", ncpes$adjusted.unadjusted.yearonyear == "adjusted" & ncpes$Cancer.Type == "All Cancers" ) %>%
select(Question.Number,Question.Text,Number.of.responses,scored.percentage) %>%
datatable(rownames = FALSE, colnames = c("Question Number","Question","Number of Responses","Score"),
extensions = c('Buttons', 'Scroller'),
options = list(
pageLength = 52,
dom = 'Bfrtip',
buttons = c('copy','csv', 'excel'),
deferRender = TRUE,
scrollY = 400,
scroller = TRUE
))
ggpoverviewtable
ggpoverviewtable <- ncpes %>%
filter(ncpes$Geog == "Trust" & ncpes$Trust.Name == trust & ncpes$IMD == "All" & ncpes$Year == 2018 &
ncpes$Gender == "Both", ncpes$adjusted.unadjusted.yearonyear == "adjusted" & ncpes$Cancer.Type == "All Cancers" ) %>%
select(Question.Number,Question.Text,Number.of.responses,scored.percentage) %>%
datatable(rownames = FALSE, colnames = c("Question Number","Question","Number of Responses","Score"),
class = c('wrap'),extensions = c('Buttons', 'Scroller'),
options = list(
pageLength = 52,
dom = 'Bfrtip',
buttons = c('copy','csv', 'excel'),
deferRender = TRUE,
scrollY = 400,
scroller = TRUE
))
ggpoverviewtable
ggpoverviewtable <- ncpes %>%
filter(ncpes$Geog == "Trust" & ncpes$Trust.Name == trust & ncpes$IMD == "All" & ncpes$Year == 2018 &
ncpes$Gender == "Both", ncpes$adjusted.unadjusted.yearonyear == "adjusted" & ncpes$Cancer.Type == "All Cancers" ) %>%
select(Question.Number,Question.Text,Number.of.responses,scored.percentage) %>%
datatable(rownames = FALSE, colnames = c("Question Number","Question","Number of Responses","Score"),
class = c('wrap'),extensions = c('Buttons', 'Scroller'),
options = list(
pageLength = 52,
dom = 'Bfrtip',
buttons = c('copy','csv', 'excel'),
deferRender = TRUE,
scrollY = 400,
scroller = TRUE,
columnDefs = list(list(width = '200px', targets = "_all"))
))
ggpoverviewtable
ggpoverviewtable <- ncpes %>%
filter(ncpes$Geog == "Trust" & ncpes$Trust.Name == trust & ncpes$IMD == "All" & ncpes$Year == 2018 &
ncpes$Gender == "Both", ncpes$adjusted.unadjusted.yearonyear == "adjusted" & ncpes$Cancer.Type == "All Cancers" ) %>%
select(Question.Number,Question.Text,Number.of.responses,scored.percentage) %>%
datatable(rownames = FALSE, colnames = c("Question Number","Question","Number of Responses","Score"),
class = c('wrap'),extensions = c('Buttons', 'Scroller'),
options = list(
pageLength = 52,
dom = 'Bfrtip',
buttons = c('copy','csv', 'excel'),
deferRender = TRUE,
scrollY = 400,
scroller = TRUE,
columnDefs = list(list(width = '50px', targets = "_all"))
))
ggpoverviewtable
ggpoverviewtable <- ncpes %>%
filter(ncpes$Geog == "Trust" & ncpes$Trust.Name == trust & ncpes$IMD == "All" & ncpes$Year == 2018 &
ncpes$Gender == "Both", ncpes$adjusted.unadjusted.yearonyear == "adjusted" & ncpes$Cancer.Type == "All Cancers" ) %>%
select(Question.Number,Question.Text,Number.of.responses,scored.percentage) %>%
datatable(rownames = FALSE, colnames = c("Question Number","Question","Number of Responses","Score"),
extensions = c('Buttons', 'Scroller'),
options = list(
pageLength = 52,
dom = 'Bfrtip',
buttons = c('copy','csv', 'excel'),
deferRender = TRUE,
scrollY = 400,
scroller = TRUE,
columnDefs = list(list(width = '50px', targets = "_all"))
))
ggpoverviewtable
ggpoverviewtable <- ncpes %>%
filter(ncpes$Geog == "Trust" & ncpes$Trust.Name == trust & ncpes$IMD == "All" & ncpes$Year == 2018 &
ncpes$Gender == "Both", ncpes$adjusted.unadjusted.yearonyear == "adjusted" & ncpes$Cancer.Type == "All Cancers" ) %>%
select(Question.Number,Question.Text,Number.of.responses,scored.percentage) %>%
datatable(rownames = FALSE, colnames = c("Question Number","Question","Number of Responses","Score"),
extensions = c('Buttons'),
options = list(
pageLength = 52,
dom = 'Bfrtip',
buttons = c('copy','csv', 'excel'),
deferRender = TRUE,
columnDefs = list(list(width = '50px', targets = "_all"))
))
ggpoverviewtable
runApp('R shiny apps/NCPES')
runApp('R shiny apps/NCPES')
runApp('R shiny apps/NCPES')
runApp('R shiny apps/NCPES')
## load packages
library(shiny)
runApp('GitHub/NCPES-Dashboard')
runApp('GitHub/NCPES-Dashboard')
runApp('GitHub/NCPES-Dashboard')
runApp('GitHub/NCPES-Dashboard')
runApp('GitHub/NCPES-Dashboard')
install.packages("shinyWidgets")
install.packages("dqshiny")
## load packages
library(shiny)
runApp('GitHub/NCPES-Dashboard')
runApp('GitHub/NCPES-Dashboard')
## load packages
library(shiny)
library(tidyverse)
library(shinydashboard)
runApp('GitHub/NCPES-Dashboard')
runApp()
runApp('GitHub/NCPES-Dashboard')
shiny::runApp('GitHub/NCPES-Dashboard')
print(ncpes$cpesqtype %in% input$Question.Type)
print(ncpes$cpesqtype)
ncpes[order(ncpes$Question.Number),]
runApp('GitHub/NCPES-Dashboard')
runApp('GitHub/NCPES-Dashboard')
runApp('GitHub/NCPES-Dashboard')
runApp()
runApp('GitHub/NCPES-Dashboard')
runApp('GitHub/NCPES-Dashboard')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='centre-for-cancer-outcomes',
token='E4914B3C908FB8F54D8FE9D8BF025C14',
secret='iqKcnDHcapcQpel2l6tLsSuS9zV9miS2lEDVXMIN')
setwd()
getwd()
library(rsconnect)
rsconnect::deployApp("C:/Users/david/Documents/GitHub/Dashboard/App")
runApp('GitHub/NCPES-Dashboard/App')
runApp('GitHub/NCPES-Dashboard/App')
regionlookup <- read.csv("https://raw.githubusercontent.com/Centre-for-Cancer-Outcomes/NCPES-Dashboard/master/CPES_geog_lookuptable.csv",
sep=",",header = TRUE)
View(regionlookup)
## load packages
library(shiny)
library(tidyverse)
ncpes$ <- left_join(ncpes,select(regionlookup,CCG18NM,CALNCV18NM), by = c("Trust.Name" ="CCG18NM" ))
ncpes <- left_join(ncpes,select(regionlookup,CCG18NM,CALNCV18NM), by = c("Trust.Name" ="CCG18NM" ))
unique(ncpes$CALNCV18NM)
runApp('GitHub/NCPES-Dashboard/App')
runApp('GitHub/NCPES-Dashboard/App')
shiny::runApp('GitHub/NCPES-Dashboard/App')
runApp('GitHub/NCPES-Dashboard/App')
runApp('GitHub/NCPES-Dashboard/App')
runApp('GitHub/NCPES-Dashboard/App')
unique(factor(ncpes$Trust.Name[ncpes$Geog == "CCG" & ncpes$CALNCV18NM == "North Central and North East London"]
unique(factor(ncpes$Trust.Name[ncpes$Geog == "CCG" & ncpes$CALNCV18NM == "North Central and North East London"]))
unique(factor(ncpes$Trust.Name[ncpes$Geog == "CCG" & ncpes$CALNCV18NM == "North Central and North East London"]))
runApp('GitHub/NCPES-Dashboard/App')
regionlookup <- read.csv("https://raw.githubusercontent.com/Centre-for-Cancer-Outcomes/NCPES-Dashboard/master/CPES_geog_lookuptable.csv",
sep=",",header = TRUE)
ncpes <- left_join(ncpes,select(regionlookup,CCG18NM,CALNCV18NM), by = c("Trust.Name" ="CCG18NM" ))
## load packages
library(shiny)
library(tidyverse)
ncpes <- left_join(ncpes,select(regionlookup,CCG18NM,CALNCV18NM), by = c("Trust.Name" ="CCG18NM" ))
unique(factor(ncpes$Trust.Name[ncpes$Geog == "Trust" & ncpes$CALNCV18NM == "North Central and North East London"]))
u
unique(factor(ncpes$Trust.Name[ncpes$Geog == "Trust" & trimws(ncpes$CALNCV18NM) == "North Central And North East London"]))
regionlookup$CALNCV18NM <- trimws(regionlookup$CALNCV18NM)
ncpes <- left_join(ncpes,select(regionlookup,CCG18NM,CALNCV18NM), by = c("Trust.Name" ="CCG18NM" ))
unique(factor(ncpes$Trust.Name[ncpes$Geog == "Trust" & trimws(ncpes$CALNCV18NM) == "North Central And North East London"]))
runApp('GitHub/NCPES-Dashboard/App')
runApp('GitHub/NCPES-Dashboard/App')
runApp('GitHub/NCPES-Dashboard/App')
View(ncpes)
unique(ncpes$CALNCV18NM)
View(ncpes)
ncpes <- left_join(ncpes,select(regionlookup,CCG18NM,CCG18CDH), by = c("Trust.Code" ="CCG18CDH" ))
unique(ncpes$CALNCV18NM)
unique(trimws(ncpes$CALNCV18NM))
regionlookup <- read.csv("https://raw.githubusercontent.com/Centre-for-Cancer-Outcomes/NCPES-Dashboard/master/CPES_geog_lookuptable.csv",
sep=",",header = TRUE)
regionlookup$CALNCV18NM <- trimws(regionlookup$CALNCV18NM)
ncpes <- left_join(ncpes,select(regionlookup,CCG18NM,CCG18CDH), by = c("Trust.Code" ="CCG18CDH" ))
unique(trimws(ncpes$CALNCV18NM))
regionlookup <- read.csv("https://raw.githubusercontent.com/Centre-for-Cancer-Outcomes/NCPES-Dashboard/master/CPES_geog_lookuptable.csv",
sep=",",header = TRUE)
regionlookup$CALNCV18NM <- trimws(regionlookup$CALNCV18NM)
ncpes <- left_join(ncpes,select(regionlookup,CCG18NM,CCG18CDH), by = c("Trust.Code" ="CCG18CDH" ))
unique(trimws(ncpes$CALNCV18NM))
regionlookup <- read.csv("https://raw.githubusercontent.com/Centre-for-Cancer-Outcomes/NCPES-Dashboard/master/CPES_geog_lookuptable.csv",
sep=",",header = TRUE)
View(regionlookup)
regionlookup$CALNCV18NM <- trimws(regionlookup$CALNCV18NM)
ncpes <- left_join(ncpes,select(regionlookup,CCG18NM,CCG18CDH), by = c("Trust.Code" ="CCG18CDH" ))
unique(trimws(ncpes$CALNCV18NM))
ncpes<-read.csv("https://raw.githubusercontent.com/Centre-for-Cancer-Outcomes/NCPES-Dashboard/master/CPESDataset.csv",sep = ",", na.strings = "NA",
stringsAsFactors = FALSE)
ncpes$qnum <- as.numeric(gsub("[a-zA-Z ]", "", ncpes$Question.Number))
ncpes$scored.percentage <-  ifelse(ncpes$scored.percentage > 1,ncpes$scored.percentage,ncpes$scored.percentage * 100)
ncpes$Lower.95..confidence.interval <-ifelse(ncpes$Lower.95..confidence.interval >1,ncpes$Lower.95..confidence.interval,ncpes$Lower.95..confidence.interval *100)
ncpes$Upper.95..confidence.interval <- ifelse(ncpes$Upper.95..confidence.interval >1,ncpes$Upper.95..confidence.interval,ncpes$Upper.95..confidence.interval *100)
ncpes$Expected.Range..lower. <- ifelse(ncpes$Expected.Range..lower. > 1,ncpes$Expected.Range..lower.,ncpes$Expected.Range..lower. * 100)
ncpes$Expected.Range..upper. <- ifelse(ncpes$Expected.Range..upper. > 1,ncpes$Expected.Range..upper.,ncpes$Expected.Range..upper. * 100)
ncpes$abrvperformance <- ifelse(ncpes$Performance.Rating == 1, "Above",
ifelse(ncpes$Performance.Rating == 2,"As Expected","Below"))
ncpes$Number.of.responses <- as.numeric(gsub(",","",ncpes$Number.of.responses))
regionlookup <- read.csv("https://raw.githubusercontent.com/Centre-for-Cancer-Outcomes/NCPES-Dashboard/master/CPES_geog_lookuptable.csv",
sep=",",header = TRUE)
regionlookup$CALNCV18NM <- trimws(regionlookup$CALNCV18NM)
ncpes <- left_join(ncpes,select(regionlookup,CCG18NM,CCG18CDH), by = c("Trust.Code" ="CCG18CDH" ))
unique(trimws(ncpes$CALNCV18NM))
unique(trimws(ncpes$CALNCV18NM))
ncpes <- left_join(ncpes,select(regionlookup,CCG18CDH,CALNCV18NM), by = c("Trust.Code" ="CCG18CDH" ))
unique((ncpes$CALNCV18NM))
runApp('GitHub/NCPES-Dashboard/App')
shiny::runApp('GitHub/NCPES-Dashboard/App')
shiny::runApp('GitHub/NCPES-Dashboard/App')
ncpes$cpesqtype <- factor(ncpes$cpesqtype, levels = c("Seeing your GP","Seeing your GP","Diagnostic Test","Finding out about your condition ",
"Deciding the best treatment","Clinical Nurse Specialist","Support","Operations",
"Hospital care as an Inpatient ","Hospital casre as a day paytient/outpatient","Home care and support",
"Care from your GP", "Your overall NHS care"))
ncpes$cpesqtype <- factor(ncpes$cpesqtype, levels = c("Seeing your GP","Diagnostic Test","Finding out about your condition ",
"Deciding the best treatment","Clinical Nurse Specialist","Support","Operations",
"Hospital care as an Inpatient ","Hospital casre as a day paytient/outpatient","Home care and support",
"Care from your GP", "Your overall NHS care"))
runApp('GitHub/NCPES-Dashboard/App')
runApp('GitHub/NCPES-Dashboard/App')
runApp()
runApp('GitHub/NCPES-Dashboard/App')
runApp('GitHub/NCPES-Dashboard/App')
ncpes$Question.Text[ncpes$cpesqtype %in%c("Seeing your GP")]
unique(ncpes$Question.Text[ncpes$cpesqtype %in%c("Seeing your GP")])
runApp('GitHub/NCPES-Dashboard/App')
shiny::runApp('GitHub/NCPES-Dashboard/App')
install.packages("XML")
install.packages("methods")
install.packages(c("backports", "callr", "curl", "gargle", "htmltools", "htmlwidgets", "later", "pkgconfig", "promises", "rmarkdown", "shiny", "shinyAce", "xfun"))
install.packages(c("backports", "callr", "curl", "gargle", "htmltools", "htmlwidgets", "later", "pkgconfig", "promises", "rmarkdown", "shiny", "shinyAce", "xfun"))
install.packages(c("backports", "callr", "curl", "gargle", "htmltools", "htmlwidgets", "later", "pkgconfig", "promises", "rmarkdown", "shiny", "shinyAce", "xfun"))
install.packages(c("backports", "callr", "curl", "gargle", "htmltools", "htmlwidgets", "later", "pkgconfig", "promises", "rmarkdown", "shiny", "shinyAce", "xfun"))
shiny::runApp('GitHub/NCPES-Dashboard/App')
shiny::runApp('GitHub/NCPES-Dashboard/App')
shiny::runApp('GitHub/NCPES-Dashboard/App')
library(shiny)
install.packages(c("digest", "htmltools", "later", "promises"))
install.packages(c("digest", "htmltools", "later", "promises"))
install.packages(c("digest", "htmltools", "later", "promises"))
install.packages(c("digest", "htmltools", "later", "promises"))
shiny::runApp('GitHub/NCPES-Dashboard/App')
library(shiny)
library(shiny)
install.packages("shiny")
shiny::runApp('GitHub/NCPES-Dashboard/App')
library(jsonlite)
detach("package:jsonlite", unload = TRUE)
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
install.packages("tidyverse")
install.packages("shiny")
install.packages("shinydashboard")
install.packages("shinyWidgets")
install.packages("DT")
install.packages("dqshiny")
library(shiny)
install.packages("htmltools")
library(shiny)
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
install.packages("shinydashboard")
library(shiny)
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
install.packages("shiny")
library(shiny)
install.packages("shinydashboard")
install.packages("shinyWidgets")
install.packages("tidyverse")
install.packages("DT")
install.packages("dqshiny")
runApp('GitHub/NCPES-Dashboard/App')
